---
// src/components/PdfViewer.astro
export interface Props {
  pdfUrl: string;
}

const { pdfUrl } = Astro.props;

// Construct the worker URL for PDF.js
const pdfjsWorkerSrc = `/pdf.worker.min.mjs`;
---

<div id="pdf-viewer-container" class="pdf-viewer-container" data-pdf-url={pdfUrl}>
  <div class="canvas-wrapper">
    <canvas id="pdf-canvas" style="display: none;"></canvas>
    <div class="loading-spinner"></div>
  </div>
  <div class="pdf-controls">
    <button id="prev-page" title="Previous Page">
      <span class="icon"><</span>
      <span class="text">Previous</span>
    </button>
    <div id="page-indicator" class="page-indicator" title="Go to Page">
      <span id="page-num-display"></span>&nbsp;/&nbsp;<span id="page-count-display"></span>
    </div>
    <div id="page-navigation-group" style="display: none;">
      <div id="page-input-container" class="page-input-container">
        <input type="number" id="page-input" min="1" />
        <button id="goto-page-btn">Go</button>
        <span id="page-input-error-icon" class="page-input-error-icon" style="display: none;">&#9432;</span>
      </div>
    </div>
    <button id="next-page" title="Next Page">
      <span class="icon">></span>
      <span class="text">Next</span>
    </button>
    <span class="spacer"></span>
    <button id="zoom-out" class="zoom-button" title="Zoom Out">-</button>
    <span id="zoom-level" class="zoom-level-display">100%</span>
    <button id="zoom-in" class="zoom-button" title="Zoom In">+</button>
    <span class="spacer"></span>
    <button id="fullscreen-btn" title="Toggle Fullscreen">
      <span class="icon">&#x2922;</span>
      <span class="text" style="display: none;">Full Screen</span>
    </button>
    
    <!-- Hamburger Menu Button -->
    <button id="menu-btn" class="menu-button" title="More Options">
      <span class="icon">‚ò∞</span>
    </button>
  </div>

  <!-- Modal Overlay Menu -->
  <div id="pdf-menu-overlay" class="pdf-menu-overlay" style="display: none;">
    <div class="pdf-menu-modal">
      <div class="menu-header">
        <h3 class="menu-title">üìñ PDF Viewer Options</h3>
        <button id="menu-close-btn" class="menu-close-btn">&times;</button>
      </div>
      
      <div class="menu-content">
        <div class="menu-section">
          <h4 class="menu-section-title">üìö How to Use</h4>
          <div class="menu-info">
            <p>Use the controls below to navigate through the PDF document.</p>
            <ul>
              <li>üñ±Ô∏è Use Previous/Next buttons to navigate pages</li>
              <li>üîç Use +/- buttons to zoom in and out</li>
              <li>üì± Click page number to jump to specific page</li>
              <li>‚õ∂ Use fullscreen button for immersive reading</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  </div>

</div>

<script define:vars={{ pdfjsWorkerSrc }}>
  // --- State Management ---
  let currentPdfDoc = null;
  let currentPageNum = 1;
  let currentScale = 1.5;
  let totalPages = 0;
  let activePdfUrl = ''; // This will be updated on each page load
  let handlers = {}; // To store event listener references for cleanup

  // --- Core Lifecycle Functions ---

  async function initializePdfViewer() {
    console.log('üöÄ Starting PDF viewer initialization...');
    const spinner = document.querySelector('.loading-spinner');
    if (spinner) spinner.style.display = 'block';

    try {
      await waitForRequiredElements();
      await loadPdf();
      setupEventListeners();
      setupKeyboardShortcuts();
      console.log('‚úÖ PDF viewer initialization complete');
    } catch (error) {
      console.error('‚ùå Initialization failed:', error);
      const canvasWrapper = document.querySelector('.canvas-wrapper');
      if (canvasWrapper) {
        canvasWrapper.innerHTML = `<div style="padding: 20px; text-align: center; color: #721c24; background: #f8d7da; border: 1px solid #f5c6cb; border-radius: 8px;">
          <h3>‚ùå PDF Viewer Initialization Failed</h3>
          <p>Error: ${error.message}</p>
        </div>`;
      }
    } finally {
      if (spinner) spinner.style.display = 'none';
    }
  }

  function cleanup() {
    console.log('Cleaning up PDF viewer instance...');
    removeEventListeners();
    if (currentPdfDoc) {
      console.log('Destroying previous PDF document instance.');
      currentPdfDoc.destroy();
      currentPdfDoc = null;
    }
    currentPageNum = 1;
    totalPages = 0;
    currentScale = 1.5;
  }

  function setupViewer() {
    const container = document.getElementById('pdf-viewer-container');
    if (container) {
      activePdfUrl = container.dataset.pdfUrl;
      console.log(`PDF Viewer container found for ${activePdfUrl}, running setup...`);
      cleanup();
      initializePdfViewer();
    } else {
      console.log('No PDF viewer on this page, cleaning up old listeners.');
      cleanup();
    }
  }

  // --- Astro Lifecycle Hook ---

  if (!window.astroPdfViewerListenerAttached) {
    console.log('Attaching astro:page-load listener.');
    document.addEventListener('astro:page-load', setupViewer);
    window.astroPdfViewerListenerAttached = true;
  }

  // Initial run for the very first page load.
  setupViewer();

  // --- Event Listener Management ---

  function addListener(id, element, event, handler) {
    if (element) {
      element.addEventListener(event, handler);
      handlers[id] = { element, event, handler };
    }
  }

  function removeEventListeners() {
    console.log(`Removing ${Object.keys(handlers).length} event listeners.`);
    Object.values(handlers).forEach(({ element, event, handler }) => {
      if (element) element.removeEventListener(event, handler);
    });
    handlers = {};
  }

  function setupEventListeners() {
    console.log('üîß Setting up event listeners...');
    addListener('prevPage', document.getElementById('prev-page'), 'click', onPrevPage);
    addListener('nextPage', document.getElementById('next-page'), 'click', onNextPage);
    addListener('zoomIn', document.getElementById('zoom-in'), 'click', onZoomIn);
    addListener('zoomOut', document.getElementById('zoom-out'), 'click', onZoomOut);
    addListener('fullscreen', document.getElementById('fullscreen-btn'), 'click', toggleFullscreen);
    addListener('docFullscreenChange', document, 'fullscreenchange', onFullscreenChange);
    addListener('menuBtn', document.getElementById('menu-btn'), 'click', toggleMenu);
    addListener('menuCloseBtn', document.getElementById('menu-close-btn'), 'click', toggleMenu);
    addListener('pageIndicator', document.getElementById('page-indicator'), 'click', togglePageInput);
    addListener('gotoPageBtn', document.getElementById('goto-page-btn'), 'click', gotoPage);
    addListener('pageInputEnter', document.getElementById('page-input'), 'keypress', (e) => e.key === 'Enter' && gotoPage());
  }

  function setupKeyboardShortcuts() {
    addListener('keyboard', document, 'keydown', (event) => {
      if (event.target.tagName === 'INPUT') return;
      switch(event.key) {
        case 'ArrowLeft': onPrevPage(); break;
        case 'ArrowRight': onNextPage(); break;
        case 'f': toggleFullscreen(); break;
      }
    });
  }

  // --- PDF & Rendering Logic ---

  async function loadPdf() {
    if (!activePdfUrl) throw new Error('PDF URL is not set.');
    console.log('Loading PDF:', activePdfUrl);
    const pdfjsLib = await import('/pdf.min.mjs');
    pdfjsLib.GlobalWorkerOptions.workerSrc = pdfjsWorkerSrc;

    const loadingTask = pdfjsLib.getDocument(activePdfUrl);
    currentPdfDoc = await loadingTask.promise;
    totalPages = currentPdfDoc.numPages;
    console.log(`PDF loaded successfully: ${totalPages} pages`);

    document.getElementById('page-count-display').textContent = totalPages;
    document.getElementById('page-input').max = totalPages;
    
    const savedPage = loadReadingProgress();
    currentPageNum = (savedPage && savedPage <= totalPages) ? savedPage : 1;
    
    await renderPage(currentPageNum);
    updateZoomLevelDisplay();
  }

  async function renderPage(num, scale = null) {
    if (!currentPdfDoc) return;
    if (num < 1 || num > totalPages) return;

    currentScale = scale || currentScale;
    console.log(`Rendering page ${num} at scale ${currentScale}`);

    const page = await currentPdfDoc.getPage(num);
    const viewport = page.getViewport({ scale: currentScale });
    const canvasWrapper = document.querySelector('.canvas-wrapper');
    if (!canvasWrapper) return;

    const oldCanvas = document.getElementById('pdf-canvas');
    if (oldCanvas) oldCanvas.remove();

    const canvas = document.createElement('canvas');
    canvas.id = 'pdf-canvas';
    const devicePixelRatio = window.devicePixelRatio || 1;
    canvas.width = viewport.width * devicePixelRatio;
    canvas.height = viewport.height * devicePixelRatio;
    canvas.style.width = `${viewport.width}px`;
    canvas.style.height = `${viewport.height}px`;
    canvas.style.display = 'inline-block';
    canvasWrapper.appendChild(canvas);

    const ctx = canvas.getContext('2d');
    ctx.scale(devicePixelRatio, devicePixelRatio);

    await page.render({ canvasContext: ctx, viewport }).promise;
    console.log(`‚úÖ Successfully rendered page ${num}`);

    currentPageNum = num;
    document.getElementById('page-num-display').textContent = num;
    saveReadingProgress(num);
    canvasWrapper.scrollTop = 0;
  }

  // --- UI Handlers & Helpers ---

  function onPrevPage() { if (currentPageNum > 1) renderPage(currentPageNum - 1); }
  function onNextPage() { if (currentPageNum < totalPages) renderPage(currentPageNum + 1); }
  function onZoomIn() { renderPage(currentPageNum, currentScale + 0.25); updateZoomLevelDisplay(); }
  function onZoomOut() { if (currentScale > 0.25) { renderPage(currentPageNum, currentScale - 0.25); updateZoomLevelDisplay(); } }

  function toggleFullscreen() {
    const viewer = document.getElementById('pdf-viewer-container');
    if (!document.fullscreenElement) viewer.requestFullscreen().catch(err => console.error(err));
    else document.exitFullscreen();
  }

  function onFullscreenChange() {
    const btn = document.getElementById('fullscreen-btn');
    if (!btn) return;
    const isFullscreen = !!document.fullscreenElement;
    btn.querySelector('.icon').innerHTML = isFullscreen ? '&#x2923;' : '&#x2922;';
    btn.title = isFullscreen ? 'Exit Fullscreen' : 'Toggle Fullscreen';
  }

  function toggleMenu() {
    const menuOverlay = document.getElementById('pdf-menu-overlay');
    if (menuOverlay) menuOverlay.style.display = menuOverlay.style.display === 'none' ? 'flex' : 'none';
  }

  function togglePageInput() {
    document.getElementById('page-navigation-group').style.display = 'block';
    document.getElementById('page-indicator').style.display = 'none';
  }

  function gotoPage() {
    const pageInput = document.getElementById('page-input');
    const pageNum = parseInt(pageInput.value, 10);
    if (!isNaN(pageNum) && pageNum >= 1 && pageNum <= totalPages) renderPage(pageNum);
    pageInput.value = '';
    document.getElementById('page-navigation-group').style.display = 'none';
    document.getElementById('page-indicator').style.display = 'flex';
  }

  function updateZoomLevelDisplay() {
    document.getElementById('zoom-level').textContent = `${Math.round(currentScale * 100)}%`;
  }

  function saveReadingProgress(page) {
    if (!activePdfUrl) return;
    try { localStorage.setItem(activePdfUrl, page.toString()); } catch (e) { console.warn(e); }
  }

  function loadReadingProgress() {
    if (!activePdfUrl) return null;
    try { return parseInt(localStorage.getItem(activePdfUrl), 10) || null; } catch (e) { return null; }
  }

  async function waitForRequiredElements() {
    const selectors = ['#page-count-display', '#page-input', '#page-num-display'];
    let attempts = 0;
    while (attempts < 50) {
      if (selectors.every(s => document.querySelector(s))) return;
      await new Promise(res => setTimeout(res, 100));
      attempts++;
    }
    throw new Error('Required UI elements did not appear in time.');
  }
</script>

<style>
  .pdf-viewer-container {
    display: flex;
    flex-direction: column;
    height: 100vh;
    background: transparent;
  }

  .canvas-wrapper {
    flex-grow: 1;
    overflow: auto;
    padding: 20px;
    background-color: #ffffff; /* Changed to white */
    text-align: center;
    position: relative; /* Needed for absolute positioning of canvas */
    border-bottom: 1px solid #ccc;
  }

  .loading-spinner {
    border: 4px solid rgba(0, 0, 0, 0.1);
    width: 36px;
    height: 36px;
    border-radius: 50%;
    border-left-color: #09f;
    animation: spin 1s ease infinite;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  #pdf-canvas {
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    background: white;
    display: block;
    margin: auto;
    max-width: none;
    max-height: none;
  }

  .pdf-controls {
    display: flex;
    align-items: center;
    gap: 10px;
    padding: 10px 20px;
    background: white;
    border-top: 1px solid #ddd;
    flex-wrap: wrap;
  }

  .pdf-controls button {
    display: flex;
    align-items: center;
    gap: 5px;
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
    background: white;
    cursor: pointer;
    font-size: 14px;
  }

  .pdf-controls button:hover {
    background: #f0f0f0;
  }

  .pdf-controls button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

      #fullscreen-btn {
        padding: 8px 12px; /* Match default button padding */
      }

      #fullscreen-btn .icon {
        font-size: 18px;    /* Match menu button icon size */
        display: inline-flex; 
        align-items: center;
      }

  .page-indicator {
    display: flex;
    align-items: center;
    padding: 8px 12px;
    background: #f8f9fa;
    border: 1px solid #ddd;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
  }

  .page-input-container {
    display: flex;
    align-items: center;
    gap: 5px;
  }

  #page-input {
    width: 60px;
    padding: 4px 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
    text-align: center;
  }

  .zoom-level-display {
    padding: 8px 12px;
    background: #f8f9fa;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 14px;
    min-width: 50px;
    text-align: center;
  }

  .spacer {
    flex: 1;
  }

  .menu-button {
    font-size: 18px !important;
  }

  /* Menu Overlay Styles */
  .pdf-menu-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }

  .pdf-menu-modal {
    background: white;
    border-radius: 8px;
    padding: 20px;
    max-width: 500px;
    width: 90%;
    max-height: 80vh;
    overflow-y: auto;
  }

  .menu-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    border-bottom: 1px solid #eee;
    padding-bottom: 10px;
  }

  .menu-title {
    margin: 0;
    font-size: 18px;
  }

  .menu-close-btn {
    background: none;
    border: none;
    font-size: 24px;
    cursor: pointer;
    padding: 0;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .menu-section {
    margin-bottom: 20px;
  }

  .menu-section-title {
    font-size: 16px;
    margin: 0 0 10px 0;
    color: #333;
  }

  .menu-options {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }

  .menu-option {
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
    padding: 8px;
    border-radius: 4px;
    transition: background-color 0.2s;
  }

  .menu-option:hover {
    background: #f8f9fa;
  }

  .option-icon {
    font-size: 16px;
  }

  .option-text {
    font-size: 14px;
  }

  .menu-controls {
    display: flex;
    flex-direction: column;
    gap: 12px;
  }

  .control-row {
    display: flex;
    align-items: center;
    gap: 12px;
  }

  .control-label {
    font-weight: 500;
    min-width: 60px;
    font-size: 14px;
  }

  .menu-control-btn {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 10px 16px;
    border: none;
    border-radius: 6px;
    background: #f8f9fa;
    color: #495057;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 14px;
  }

  .menu-control-btn:hover {
    background: #e9ecef;
    transform: translateY(-1px);
  }

  .menu-control-btn:active {
    transform: translateY(0);
  }

  .menu-control-btn .icon {
    font-size: 16px;
  }

  .menu-select {
    flex: 1;
    padding: 6px 10px;
    border: 1px solid #ced4da;
    border-radius: 4px;
    background: white;
    font-size: 14px;
    max-width: 200px;
    min-width: 150px;
  }


  /* Menu Info Styles */
  .menu-info {
    padding: 15px;
    background: #f8f9fa;
    border-radius: 6px;
    border: 1px solid #e9ecef;
  }

  .menu-info p {
    margin: 0 0 10px 0;
    color: #495057;
    font-size: 14px;
  }

  .menu-info ul {
    margin: 0;
    padding-left: 20px;
    color: #6c757d;
    font-size: 13px;
  }

  .menu-info li {
    margin-bottom: 5px;
  }

  @media (max-width: 768px) {
    .pdf-controls {
      padding: 8px 10px;
      gap: 5px;
    }
    
    .pdf-controls button {
      padding: 6px 8px;
      font-size: 12px;
    }
    
    .pdf-controls .text {
      display: none;
    }
    
    .pdf-menu-modal {
      width: 95%;
      padding: 15px;
    }

    #fullscreen-btn {
      padding: 6px 8px; /* Match other buttons on small screens */
    }
    #fullscreen-btn .icon {
      font-size: 18px; /* Match menu button icon on small screens */
    }
  }
</style>